roadmap:
  - update connectors to use peer-dependency

docs:
  - move comparison out of why and far away
  - it's not obvious that map works at SQL level
  - Usage doc is too verbose, Andrei whats an high level overview like https://diesel.rs/ examples
  - dynamic schema is not obvious
  - list of features at the top

bugs:
  - fix bug users.orderByDesc(x => x.id).map(x => x.id).first(x => x)
  - ref can become nullable after, for example, left join for the right entity,
    now we assume that ref condition always takes non-null entities (fixed?)

features:
  - type check
  - unselection support
  - typescript support
  - support schema aliases
  - migrations from schema
  - insert/delete/update
  - transactions
  - array support
  - allow nested wildcards because they sometimes can be optimized out later
  - support decimal type
  - support Date types (date, time, timetz, timestamp, timestamptz)
  - support UUID
  - now that we know about all properties in a query, we can throw an error when accessing an unknown prop
  - validate that query result is good according to projection schema during materialization

tech:
  - refactor combine query compiler
  - noPropertyAccessFromIndexSignature
  - noUncheckedIndexedAccess
  - no-explicit-any
  - extract base vitest config

interpreter:
  - group by
  - aggregation functions

gen:
  - aggregation functions
  - all expressions
  - gen bad queries and check that fails gracefully

testing:
  - run tests on CI
  - run gen tests on CI for 5 minutes
  - expr interpreter
  - sql interpreter
  - optimizer canonical tests
  - add except tests
  - union tests
  - intersect tests
  - date tests
  - datetime tests
  - datetime with tz tests
  - timestamp tests
  - add string length tests
  - add mean tests
  - add tests for every data type
  - add a test that selects parameter that is a number (SELECT ?), pg seems to don't work
  - separate gen tests for optimizer and interpreter

query compiler:
  - use one join for all props from the same ref

sql optimizer:
  - no join for x.parent.id, just use parent_id
  - remove inner (FROM/JOIN) order by if outer has its own order by
  - don't lift select from with order if parent is combination
  - relax group by opt constraint
  - relax limit opt constraint
  - remove useless joins after optimization
  - optimize non inner joins

release:
  - check all `new Error`
  - check all `assertNever`
  - fix all errors (throw, assertions)
  - JSDoc
  - README.md
  - website

renderers:
  sql:
    - postgres
    - mysql
    - sql server
    - oracle
    - mariadb
    - cosmosdb
    - casandra
    - firebird
    - cockroachdb

done:
  - fix better-sqlite3 tests
  - add interpreter tests
  - Expr.sql
  - Query.sql
  - Query.schema
  - support alias usage in raw sql
  - add toLowerCase/toUpperCase
  - sqlite support
